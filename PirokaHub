--!strict
--[[
	Piroka Hub UI Library
	Desenvolvida por AI com base no design de GUI de Gabriel55477uui.
	Este script é totalmente autocontido e não requer uma pasta 'Element' separada.
]]

local PirokaHub = {}
PirokaHub.__index = PirokaHub

-- Serviços
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ProximityPromptService = game:GetService("ProximityPromptService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Instâncias da GUI Principal
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "PirokaHub_ScreenGui"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local MainFrame = Instance.new("Frame")
MainFrame.Name = "Piroka Hub"
MainFrame.Size = UDim2.new(0.36274, 0, 0.50592, 0)
MainFrame.Position = UDim2.new(0.32326, 0, 0.10841, 0)
MainFrame.BorderSizePixel = 0
MainFrame.BackgroundColor3 = Color3.fromRGB(103, 52, 4)
MainFrame.BackgroundTransparency = 0.5
MainFrame.Visible = true -- Por padrão, a GUI é visível

local ItemsScrollingFrame = Instance.new("ScrollingFrame")
ItemsScrollingFrame.Name = "Itens"
ItemsScrollingFrame.Size = UDim2.new(0.9932, 0, 0.9881, 0)
ItemsScrollingFrame.Position = UDim2.new(0, 0, 0.0119, 0)
ItemsScrollingFrame.BorderSizePixel = 0
ItemsScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 44, 173)
ItemsScrollingFrame.BackgroundTransparency = 1
ItemsScrollingFrame.ScrollBarThickness = 0
ItemsScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
ItemsScrollingFrame.CanvasSize = UDim2.new(0, 0, 5, 0)

local ItemsListLayout = Instance.new("UIListLayout")
ItemsListLayout.Name = "UIListLayout"
ItemsListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
ItemsListLayout.Padding = UDim.new(0.01, 2)
ItemsListLayout.SortOrder = Enum.SortOrder.Custom
ItemsListLayout.Parent = ItemsScrollingFrame

local MoverFrame = Instance.new("Frame")
MoverFrame.Name = "Mover"
MoverFrame.Size = UDim2.new(1, 0, 0.14286, 0)
MoverFrame.Position = UDim2.new(0, 0, -0.14286, 0)
MoverFrame.BorderSizePixel = 0
MoverFrame.BackgroundColor3 = Color3.fromRGB(103, 52, 4)
MoverFrame.BackgroundTransparency = 0.2

local MoverTextLabel = Instance.new("TextLabel")
MoverTextLabel.Name = "TextLabel"
MoverTextLabel.Size = UDim2.new(1, 0, 0.91667, 0)
MoverTextLabel.Text = "Mover"
MoverTextLabel.BorderSizePixel = 0
MoverTextLabel.TextStrokeTransparency = 0
MoverTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MoverTextLabel.BackgroundTransparency = 1
MoverTextLabel.Parent = MoverFrame

local TabsScrollingFrame = Instance.new("ScrollingFrame")
TabsScrollingFrame.Name = "Tabs"
TabsScrollingFrame.Size = UDim2.new(0.47619, 0, 1, 0)
TabsScrollingFrame.Position = UDim2.new(-0.47619, 0, 0, 0)
TabsScrollingFrame.BorderSizePixel = 0
TabsScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 44, 173)
TabsScrollingFrame.BackgroundTransparency = 0.5
TabsScrollingFrame.ScrollBarThickness = 0
TabsScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y

local TabsListLayout = Instance.new("UIListLayout")
TabsListLayout.Name = "UIListLayout"
TabsListLayout.Padding = UDim.new(0.003, 2)
TabsListLayout.Parent = TabsScrollingFrame

local HeaderFrame = Instance.new("Frame")
HeaderFrame.Name = "Header"
HeaderFrame.Size = UDim2.new(0.59864, 0, 0.88095, 0)
HeaderFrame.Position = UDim2.new(1, 0, -0.32143, 0)
HeaderFrame.BorderSizePixel = 0
HeaderFrame.BackgroundColor3 = Color3.fromRGB(103, 52, 4)
HeaderFrame.BackgroundTransparency = 0.5

local HeaderTextLabel = Instance.new("TextLabel")
HeaderTextLabel.Name = "TextLabel"
HeaderTextLabel.Size = UDim2.new(1, 0, 0.12162, 0)
HeaderTextLabel.Text = "Piroka Hub"
HeaderTextLabel.TextSize = 12
HeaderTextLabel.BorderSizePixel = 0
HeaderTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HeaderTextLabel.BackgroundTransparency = 1
HeaderTextLabel.Parent = HeaderFrame

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0.18182, 0, 0.16216, 0)
MinimizeButton.Position = UDim2.new(0.80682, 0, -0.05405, 0)
MinimizeButton.Text = "-"
MinimizeButton.TextSize = 60
MinimizeButton.TextStrokeTransparency = 0
MinimizeButton.BorderSizePixel = 2
MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.BackgroundTransparency = 1
MinimizeButton.Parent = HeaderFrame

local AspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
AspectRatioConstraint.AspectRatio = 1.75
AspectRatioConstraint.Parent = MainFrame

-- Corrigindo a hierarquia e parentesco
ItemsScrollingFrame.Parent = MainFrame
MoverFrame.Parent = MainFrame
TabsScrollingFrame.Parent = MainFrame
HeaderFrame.Parent = MainFrame

-- Adicionando bordas arredondadas e traços
local function addDecorations(instance: GuiObject)
	local corner = Instance.new("UICorner", instance)
	corner.CornerRadius = UDim.new(0, 5) -- Padrão de 5 pixels
	Instance.new("UIStroke", instance)
end
addDecorations(MainFrame)
addDecorations(ItemsScrollingFrame)
addDecorations(MoverFrame)
addDecorations(TabsScrollingFrame)
addDecorations(HeaderFrame)
addDecorations(HeaderTextLabel)
addDecorations(MinimizeButton)

-- Adicionando funcionalidade de arrastar (Draggable)
local dragging
local dragInput
local dragStart
local startPosition
MoverFrame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragInput = input
		dragStart = input.Position
		startPosition = MainFrame.Position
		input.Handled = true
	end
end)
UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		MainFrame.Position = UDim2.new(startPosition.X.Scale, startPosition.X.Offset + delta.X, startPosition.Y.Scale, startPosition.Y.Offset + delta.Y)
	end
end)
UserInputService.InputEnded:Connect(function(input)
	if input == dragInput then
		dragging = false
		dragInput = nil
	end
end)

-- Adicionando funcionalidade de minimizar
MinimizeButton.MouseButton1Click:Connect(function()
	MainFrame.Visible = not MainFrame.Visible
end)

-- =========================================================================
-- TEMPLATES AUTOCONTIDOS (Criados no próprio script)
-- =========================================================================

-- Template da Categoria
local CategoryTemplate = Instance.new("Frame")
CategoryTemplate.Name = "Category"
CategoryTemplate.Size = UDim2.new(0.9, 0, 0.05, 0)
CategoryTemplate.BorderSizePixel = 0
CategoryTemplate.BackgroundColor3 = Color3.fromRGB(150, 80, 20)
CategoryTemplate.BackgroundTransparency = 0.5
local CategoryLabel = Instance.new("TextLabel")
CategoryLabel.Name = "Label"
CategoryLabel.Size = UDim2.new(1, 0, 1, 0)
CategoryLabel.BorderSizePixel = 0
CategoryLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
CategoryLabel.BackgroundTransparency = 1
CategoryLabel.Text = "Category"
CategoryLabel.Font = Enum.Font.SourceSans
CategoryLabel.TextSize = 14
CategoryLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
CategoryLabel.Parent = CategoryTemplate
addDecorations(CategoryTemplate)

-- Template do Botão
local ButtonTemplate = Instance.new("TextButton")
ButtonTemplate.Name = "Button"
ButtonTemplate.Size = UDim2.new(0.9, 0, 0.05, 0)
ButtonTemplate.BorderSizePixel = 0
ButtonTemplate.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ButtonTemplate.BackgroundTransparency = 0.8
ButtonTemplate.Text = "Button"
ButtonTemplate.Font = Enum.Font.SourceSans
ButtonTemplate.TextSize = 14
ButtonTemplate.TextColor3 = Color3.fromRGB(255, 255, 255)
addDecorations(ButtonTemplate)

-- Template do Toggle
local ToggleTemplate = Instance.new("Frame")
ToggleTemplate.Name = "Toggle"
ToggleTemplate.Size = UDim2.new(0.9, 0, 0.05, 0)
ToggleTemplate.BorderSizePixel = 0
ToggleTemplate.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ToggleTemplate.BackgroundTransparency = 0.8
local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "TextButton"
ToggleButton.Size = UDim2.new(1, 0, 1, 0)
ToggleButton.BorderSizePixel = 0
ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.BackgroundTransparency = 1
ToggleButton.Text = "Toggle"
ToggleButton.Font = Enum.Font.SourceSans
ToggleButton.TextSize = 14
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Parent = ToggleTemplate
local IndicatorFrame = Instance.new("Frame")
IndicatorFrame.Name = "Frame"
IndicatorFrame.Size = UDim2.new(0, 15, 0.8, 0)
IndicatorFrame.Position = UDim2.new(0.05, 0, 0.1, 0)
IndicatorFrame.BorderSizePixel = 0
IndicatorFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
IndicatorFrame.Parent = ToggleTemplate
addDecorations(ToggleTemplate)
addDecorations(IndicatorFrame)

-- Template do Slider
local SliderTemplate = Instance.new("Frame")
SliderTemplate.Name = "Slider"
SliderTemplate.Size = UDim2.new(0.9, 0, 0.05, 0)
SliderTemplate.BorderSizePixel = 0
SliderTemplate.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
SliderTemplate.BackgroundTransparency = 0.8
local SliderLabel = Instance.new("TextLabel")
SliderLabel.Name = "TextLabel"
SliderLabel.Size = UDim2.new(0.7, 0, 1, 0)
SliderLabel.Position = UDim2.new(0, 0, 0, 0)
SliderLabel.BorderSizePixel = 0
SliderLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SliderLabel.BackgroundTransparency = 1
SliderLabel.Text = "Slider"
SliderLabel.Font = Enum.Font.SourceSans
SliderLabel.TextSize = 14
SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
SliderLabel.Parent = SliderTemplate
local SliderValue = Instance.new("TextBox")
SliderValue.Name = "Valor"
SliderValue.Size = UDim2.new(0.3, 0, 1, 0)
SliderValue.Position = UDim2.new(0.7, 0, 0, 0)
SliderValue.Text = "0"
SliderValue.BorderSizePixel = 0
SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SliderValue.BackgroundTransparency = 1
SliderValue.TextSize = 14
SliderValue.Font = Enum.Font.SourceSans
SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
SliderValue.TextXAlignment = Enum.TextXAlignment.Right
SliderValue.Parent = SliderTemplate
local SliderLine = Instance.new("Frame")
SliderLine.Name = "Linha"
SliderLine.Size = UDim2.new(0.9, 0, 0.05, 0)
SliderLine.Position = UDim2.new(0.05, 0, 0.6, 0)
SliderLine.BorderSizePixel = 0
SliderLine.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
SliderLine.Parent = SliderTemplate
local SliderLine2 = Instance.new("Frame")
SliderLine2.Name = "Linha2"
SliderLine2.Size = UDim2.new(0, 0, 1, 0)
SliderLine2.Position = UDim2.new(0, 0, 0, 0)
SliderLine2.BorderSizePixel = 0
SliderLine2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SliderLine2.Parent = SliderLine
local SliderBall = Instance.new("Frame")
SliderBall.Name = "Bola"
SliderBall.Size = UDim2.new(0.08, 0, 0.08, 0)
SliderBall.Position = UDim2.new(0, 0, 0.4, 0)
SliderBall.BorderSizePixel = 0
SliderBall.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SliderBall.Parent = SliderTemplate
addDecorations(SliderTemplate)
addDecorations(SliderBall)
addDecorations(SliderLine)
addDecorations(SliderLine2)

-- Template do Textbox
local TextboxTemplate = Instance.new("Frame")
TextboxTemplate.Name = "Textbox"
TextboxTemplate.Size = UDim2.new(0.9, 0, 0.05, 0)
TextboxTemplate.BorderSizePixel = 0
TextboxTemplate.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
TextboxTemplate.BackgroundTransparency = 0.8
local TextboxField = Instance.new("TextBox")
TextboxField.Name = "Valor"
TextboxField.Size = UDim2.new(1, 0, 1, 0)
TextboxField.BorderSizePixel = 0
TextboxField.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextboxField.BackgroundTransparency = 1
TextboxField.Text = "Textbox"
TextboxField.Font = Enum.Font.SourceSans
TextboxField.TextSize = 14
TextboxField.TextColor3 = Color3.fromRGB(255, 255, 255)
TextboxField.PlaceholderText = ""
TextboxField.Parent = TextboxTemplate
addDecorations(TextboxTemplate)

-- Template do Label (reusando o CategoryTemplate)
local LabelTemplate = CategoryTemplate:Clone()
LabelTemplate.Name = "Label"
LabelTemplate.BackgroundTransparency = 0.8
LabelTemplate.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
LabelTemplate:FindFirstChild("Label"):Destroy()
local LabelText = Instance.new("TextLabel")
LabelText.Name = "TextLabel"
LabelText.Size = UDim2.new(1, 0, 1, 0)
LabelText.BorderSizePixel = 0
LabelText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
LabelText.BackgroundTransparency = 1
LabelText.Text = "Label"
LabelText.Font = Enum.Font.SourceSans
LabelText.TextSize = 14
LabelText.TextColor3 = Color3.fromRGB(255, 255, 255)
LabelText.Parent = LabelTemplate

-- =========================================================================
-- FUNÇÕES PÚBLICAS DA UI LIBRARY
-- =========================================================================

--- Cria um novo frame de página para conter os elementos da UI.
-- @param name string O nome da página.
-- @return Frame O frame da página criado.
function PirokaHub.AddPage(name: string): Frame
	local pageFrame = Instance.new("Frame")
	pageFrame.Name = name
	pageFrame.Size = UDim2.new(1, 0, 1, 0)
	pageFrame.Position = UDim2.new(0, 0, 0, 0)
	pageFrame.BackgroundTransparency = 1
	pageFrame.Visible = false -- Fica escondido por padrão
	pageFrame.Parent = ItemsScrollingFrame

	local pageLayout = Instance.new("UIListLayout")
	pageLayout.Name = "PageLayout"
	pageLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	pageLayout.Padding = UDim.new(0.01, 5)
	pageLayout.FillDirection = Enum.FillDirection.Vertical
	pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
	pageLayout.Parent = pageFrame

	return pageFrame
end

--- Cria um botão de aba para alternar entre as páginas.
-- @param text string O texto a ser exibido na aba.
-- @param targetPage Frame A página que a aba irá exibir.
-- @return TextButton O botão da aba criado.
function PirokaHub.AddTab(text: string, targetPage: Frame): TextButton
	local tabButton = Instance.new("TextButton")
	tabButton.Name = text
	tabButton.Size = UDim2.new(0.9, 0, 0.08, 0)
	tabButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	tabButton.BackgroundTransparency = 0.8
	tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	tabButton.Text = text
	tabButton.Font = Enum.Font.SourceSans
	tabButton.TextSize = 14
	tabButton.Parent = TabsScrollingFrame
	addDecorations(tabButton)

	tabButton.MouseButton1Click:Connect(function()
		-- Esconde todas as outras páginas
		for _, page in ipairs(ItemsScrollingFrame:GetChildren()) do
			if page:IsA("Frame") and page.Name ~= "UIListLayout" then
				page.Visible = false
			end
		end
		-- Mostra a página alvo
		targetPage.Visible = true
	end)

	return tabButton
end

--- Cria um elemento de categoria.
-- @param text string O texto da categoria.
-- @return Frame O frame da categoria.
function PirokaHub.AddCategory(text: string): Frame
	local categoryFrame = CategoryTemplate:Clone()
	local textLabel = categoryFrame:FindFirstChild("Label")
	if textLabel then
		textLabel.Text = text
	end
	return categoryFrame
end

--- Cria um elemento de botão.
-- @param text string O texto do botão.
-- @param callback function A função a ser chamada ao clicar.
-- @return TextButton O botão criado.
function PirokaHub.AddButton(text: string, callback: () -> ()): TextButton
	local button = ButtonTemplate:Clone()
	button.Text = text
	if callback then
		button.MouseButton1Click:Connect(callback)
	end
	return button
end

--- Cria um elemento de toggle.
-- @param text string O texto do toggle.
-- @param initialState boolean O estado inicial (true para ON, false para OFF).
-- @param callback function A função a ser chamada na mudança de estado. (newState: boolean)
-- @return Frame O frame do toggle.
function PirokaHub.AddToggle(text: string, initialState: boolean, callback: (boolean) -> ()): Frame
	local toggleFrame = ToggleTemplate:Clone()
	local textButton = toggleFrame:FindFirstChild("TextButton")
	local indicatorFrame = toggleFrame:FindFirstChild("Frame")
	if textButton then
		textButton.Text = text
	end

	local currentState = initialState

	local function updateToggleVisuals()
		if currentState then
			indicatorFrame.BackgroundColor3 = Color3.fromRGB(54, 255, 15) -- Verde para ON
			indicatorFrame.Position = UDim2.new(0.875, 0, 0.1, 0) -- Posição à direita
		else
			indicatorFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Vermelho para OFF
			indicatorFrame.Position = UDim2.new(0.05, 0, 0.1, 0) -- Posição à esquerda
		end
	end

	textButton.MouseButton1Click:Connect(function()
		currentState = not currentState
		updateToggleVisuals()
		if callback then
			callback(currentState)
		end
	end)

	updateToggleVisuals() -- Define o estado visual inicial

	return toggleFrame
end

--- Cria um elemento de slider.
-- @param labelText string O texto do slider.
-- @param initialValue number O valor inicial.
-- @param minValue number O valor mínimo.
-- @param maxValue number O valor máximo.
-- @param callback function A função a ser chamada quando o valor muda. (newValue: number)
-- @return Frame O frame do slider.
function PirokaHub.AddSlider(labelText: string, initialValue: number, minValue: number, maxValue: number, callback: (number) -> ()): Frame
	local sliderFrame = SliderTemplate:Clone()
	local sliderLabel = sliderFrame:FindFirstChild("TextLabel")
	local valueTextBox = sliderFrame:FindFirstChild("Valor")
	local ball = sliderFrame:FindFirstChild("Bola")
	local line = sliderFrame:FindFirstChild("Linha")
	local lineFill = line:FindFirstChild("Linha2")
	if sliderLabel then
		sliderLabel.Text = labelText
	end

	local currentSliderValue = math.clamp(initialValue, minValue, maxValue)

	local function updateSliderVisuals(value: number)
		local percentage = (value - minValue) / (maxValue - minValue)
		local ballXOffset = percentage * (line.AbsoluteSize.X - ball.AbsoluteSize.X) + line.AbsolutePosition.X
		
		ball.Position = UDim2.new(0, math.clamp(ballXOffset, line.AbsolutePosition.X, line.AbsolutePosition.X + line.AbsoluteSize.X - ball.AbsoluteSize.X) - sliderFrame.AbsolutePosition.X, ball.Position.Y.Scale, 0)
		lineFill.Size = UDim2.new(percentage, 0, 1, 0)
		
		if valueTextBox then
			valueTextBox.Text = tostring(math.floor(value + 0.5))
		end
	end

	-- Adiciona o evento de arrastar
	local draggingSlider = false
	ball.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			draggingSlider = true
			input.Handled = true
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if draggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local mouseX = input.Position.X
			local linhaStartX = line.AbsolutePosition.X
			local linhaEndX = linhaStartX + line.AbsoluteSize.X
			local clampedMouseX = math.clamp(mouseX, linhaStartX, linhaEndX)
			local normalizedValue = (clampedMouseX - linhaStartX) / line.AbsoluteSize.X
			
			currentSliderValue = minValue + (normalizedValue * (maxValue - minValue))
			updateSliderVisuals(currentSliderValue)
			if callback then
				callback(currentSliderValue)
			end
		end
	end)
	
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			draggingSlider = false
		end
	end)
	
	-- Garante que o slider é atualizado quando o layout é finalizado
	RunService.Heartbeat:Wait()
	task.spawn(function()
		updateSliderVisuals(currentSliderValue)
	end)

	return sliderFrame
end

--- Cria um elemento de caixa de texto.
-- @param labelText string O texto do placeholder.
-- @param initialText string O texto inicial.
-- @param callback function A função a ser chamada quando o texto é alterado. (newText: string)
-- @return Frame O frame da caixa de texto.
function PirokaHub.AddTextbox(labelText: string, initialText: string, callback: (string) -> ()): Frame
	local textboxFrame = TextboxTemplate:Clone()
	local textbox = textboxFrame:FindFirstChild("Valor")
	if textbox then
		textbox.PlaceholderText = labelText
		textbox.Text = initialText
		textbox.FocusLost:Connect(function(enterPressed)
			if enterPressed and callback then
				callback(textbox.Text)
			end
		end)
	end
	return textboxFrame
end

--- Cria um elemento de label.
-- @param text string O texto do label.
-- @return Frame O frame do label.
function PirokaHub.AddLabel(text: string): Frame
	local labelFrame = LabelTemplate:Clone()
	local textLabel = labelFrame:FindFirstChild("TextLabel")
	if textLabel then
		textLabel.Text = text
	end
	return labelFrame
end

--- Cria um elemento de link.
-- @param linkText string O texto a ser exibido.
-- @param url string A URL.
-- @param imageId number? O ID da imagem do asset (opcional).
-- @return Frame O frame do link.
function PirokaHub.AddLink(linkText: string, url: string, imageId: number?): Frame
	local linkFrame = ButtonTemplate:Clone()
	linkFrame.Name = "Link"
	linkFrame.Size = UDim2.new(0.9, 0, 0.05, 0)
	
	local textLabel = Instance.new("TextLabel")
	textLabel.Name = "LinkText"
	textLabel.Text = linkText
	textLabel.TextXAlignment = Enum.TextXAlignment.Left
	textLabel.Size = UDim2.new(0.7, 0, 1, 0)
	textLabel.Position = UDim2.new(0.05, 0, 0, 0)
	textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	textLabel.BackgroundTransparency = 1
	textLabel.Parent = linkFrame
	
	local copyButton = Instance.new("TextButton")
	copyButton.Name = "CopyButton"
	copyButton.Text = "Copy"
	copyButton.BackgroundColor3 = Color3.fromRGB(15, 255, 54)
	copyButton.Size = UDim2.new(0.1, 0, 0.8, 0)
	copyButton.Position = UDim2.new(0.75, 0, 0.1, 0)
	copyButton.Parent = linkFrame
	addDecorations(copyButton)
	
	local redirectButton = Instance.new("TextButton")
	redirectButton.Name = "RedirectButton"
	redirectButton.Text = "Go"
	redirectButton.BackgroundColor3 = Color3.fromRGB(170, 170, 170)
	redirectButton.Size = UDim2.new(0.1, 0, 0.8, 0)
	redirectButton.Position = UDim2.new(0.87, 0, 0.1, 0)
	redirectButton.Parent = linkFrame
	addDecorations(redirectButton)
	
	copyButton.MouseButton1Click:Connect(function()
		warn("Copying to clipboard is generally not allowed in live games.")
	end)
	
	redirectButton.MouseButton1Click:Connect(function()
		ProximityPromptService:PromptForSafety("Would you like to visit this link?", url, Enum.PromptGameMode.StayInGame)
	end)
	
	return linkFrame
end

--- Cria um elemento de linha divisória.
-- @return Frame O frame da linha.
function PirokaHub.AddLine(): Frame
	local lineFrame = Instance.new("Frame")
	lineFrame.Name = "Linha"
	lineFrame.Size = UDim2.new(0.9, 0, 0.005, 0)
	lineFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	lineFrame.BackgroundTransparency = 0.5
	addDecorations(lineFrame)
	return lineFrame
end

--- Cria um elemento de dropdown.
-- @param labelText string O texto do dropdown.
-- @param options table<string> A lista de opções.
-- @param multiSelect boolean Se verdadeiro, permite múltiplas seleções.
-- @param callback function A função a ser chamada quando a seleção muda. (selectedItems: table<string>)
-- @return Frame O frame do dropdown.
function PirokaHub.AddDropdown(labelText: string, options: {string}, multiSelect: boolean, callback: ({string}) -> ()): Frame
    local dropdownFrame = ButtonTemplate:Clone()
    dropdownFrame.Name = "Dropdown"
    
    local mainButton = dropdownFrame
    mainButton.Text = labelText
    
    local arrow = Instance.new("ImageLabel")
    arrow.Name = "Arrow"
    arrow.Image = "rbxassetid://6030999596"
    arrow.BackgroundTransparency = 1
    arrow.Size = UDim2.new(0.1, 0, 0.8, 0)
    arrow.Position = UDim2.new(0.85, 0, 0.1, 0)
    arrow.Parent = mainButton

    local optionsFrame = Instance.new("ScrollingFrame")
    optionsFrame.Name = "Options"
    optionsFrame.Size = UDim2.new(1, 0, 0, 0)
    optionsFrame.Position = UDim2.new(0, 0, 1, 0)
    optionsFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    optionsFrame.BackgroundTransparency = 0.9
    optionsFrame.Visible = false
    optionsFrame.ZIndex = 2
    optionsFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    optionsFrame.Parent = dropdownFrame
    addDecorations(optionsFrame)

    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.Name = "OptionsLayout"
    optionsLayout.FillDirection = Enum.FillDirection.Vertical
    optionsLayout.Padding = UDim.new(0.01, 0)
    optionsLayout.Parent = optionsFrame

    local selectedItems: {string} = {}
    local itemButtons: {TextButton} = {}

    local function updateDropdownText()
        if #selectedItems == 0 then
            mainButton.Text = labelText
        elseif #selectedItems == 1 then
            mainButton.Text = selectedItems[1]
        else
            mainButton.Text = "(" .. #selectedItems .. ") items selected"
        end
    end

    local function createOptionButton(optionText: string)
        local itemButton = Instance.new("TextButton")
        itemButton.Name = "Item"
        itemButton.Text = optionText
        itemButton.Size = UDim2.new(1, 0, 0.15, 0)
        itemButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        itemButton.BackgroundTransparency = 1
        itemButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        itemButton.Font = Enum.Font.SourceSans
        itemButton.TextSize = 12
        itemButton.Parent = optionsFrame
        table.insert(itemButtons, itemButton)

        itemButton.MouseButton1Click:Connect(function()
            if multiSelect then
                local index = table.find(selectedItems, optionText)
                if index then
                    table.remove(selectedItems, index)
                    itemButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                else
                    table.insert(selectedItems, optionText)
                    itemButton.TextColor3 = Color3.fromRGB(54, 255, 15)
                end
            else
                selectedItems = {optionText}
                for _, btn in ipairs(itemButtons) do
                    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
                itemButton.TextColor3 = Color3.fromRGB(54, 255, 15)
                optionsFrame.Visible = false
            end
            updateDropdownText()
            if callback then callback(selectedItems) end
        end)
    end

    for _, option in ipairs(options) do
        createOptionButton(option)
    end

    mainButton.MouseButton1Click:Connect(function()
        optionsFrame.Visible = not optionsFrame.Visible
        if optionsFrame.Visible then
            local totalHeight = (#itemButtons * (itemButtons[1].AbsoluteSize.Y + optionsLayout.Padding.Offset))
            optionsFrame.Size = UDim2.new(1, 0, 0, math.min(totalHeight, ItemsScrollingFrame.AbsoluteSize.Y * 0.8))
            optionsFrame.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
        end
    end)
    
    return dropdownFrame
end


--- Inicializa a UI, parentando-a na PlayerGui e posicionando-a.
function PirokaHub.Init()
	-- Parenta a ScreenGui para que o layout seja calculado
	ScreenGui.Parent = PlayerGui
	-- Reposiciona a MainFrame para o centro da tela
	MainFrame.Position = UDim2.fromScale(0.5, 0.5)
	MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
	-- Define a página inicial como visível
	local initialPage = ItemsScrollingFrame:FindFirstChildOfClass("Frame")
	if initialPage then
		initialPage.Visible = true
	end
end

return PirokaHub
