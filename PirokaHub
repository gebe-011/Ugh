--!strict
--[[
    Piroka Hub UI Library
    Developed by AI based on Gabriel55477uui's GUI design.
]]

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local CollectionService = game:GetService("CollectionService")

local PirokaHub = {}
PirokaHub.__index = PirokaHub

-- Base GUI elements, assume they are pre-existing or created once
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "PirokaHub_ScreenGui"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
CollectionService:AddTag(ScreenGui, "main")

local MainFrame = Instance.new("Frame")
MainFrame.Name = "Piroka Hub"
MainFrame.BorderSizePixel = 0
MainFrame.BackgroundColor3 = Color3.fromRGB(103, 52, 4)
MainFrame.Size = UDim2.new(0.36274, 0, 0.50592, 0)
MainFrame.Position = UDim2.new(0.32326, 0, 0.10841, 0)
MainFrame.BackgroundTransparency = 0.5
Instance.new("UICorner", MainFrame)
Instance.new("UIStroke", MainFrame)

local ItemsScrollingFrame = Instance.new("ScrollingFrame")
ItemsScrollingFrame.Name = "Itens"
ItemsScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
ItemsScrollingFrame.BorderSizePixel = 0
ItemsScrollingFrame.CanvasSize = UDim2.new(0, 0, 5, 0) -- This might need to be adjusted dynamically
ItemsScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 44, 173)
ItemsScrollingFrame.Size = UDim2.new(0.9932, 0, 0.9881, 0)
ItemsScrollingFrame.Position = UDim2.new(0, 0, 0.0119, 0)
ItemsScrollingFrame.ScrollBarThickness = 0
ItemsScrollingFrame.BackgroundTransparency = 1
Instance.new("UIStroke", ItemsScrollingFrame)
Instance.new("UICorner", ItemsScrollingFrame)

local ItemsListLayout = Instance.new("UIListLayout")
ItemsListLayout.Name = "UIListLayout"
ItemsListLayout.Parent = ItemsScrollingFrame
ItemsListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
ItemsListLayout.HorizontalFlex = Enum.UIFlexAlignment.SpaceAround
ItemsListLayout.Padding = UDim.new(0.01, 2)
ItemsListLayout.SortOrder = Enum.SortOrder.Custom
ItemsListLayout.ItemLineAlignment = Enum.ItemLineAlignment.End

ItemsScrollingFrame.Parent = MainFrame

local MoverFrame = Instance.new("Frame")
MoverFrame.Name = "Mover"
MoverFrame.Interactable = false
MoverFrame.BorderSizePixel = 0
MoverFrame.BackgroundColor3 = Color3.fromRGB(103, 52, 4)
MoverFrame.Size = UDim2.new(1, 0, 0.14286, 0)
MoverFrame.Position = UDim2.new(0, 0, -0.14286, 0)
MoverFrame.BackgroundTransparency = 0.2
Instance.new("UICorner", MoverFrame)
Instance.new("UIStroke", MoverFrame)
local MoverTextLabel = Instance.new("TextLabel")
MoverTextLabel.Name = "TextLabel"
MoverTextLabel.TextStrokeTransparency = 0
MoverTextLabel.BorderSizePixel = 0
MoverTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MoverTextLabel.BackgroundTransparency = 1
MoverTextLabel.Size = UDim2.new(1, 0, 0.91667, 0)
MoverTextLabel.Text = "Mover"
MoverTextLabel.Parent = MoverFrame
MoverFrame.Parent = MainFrame

-- Draggable functionality for the Mover frame
local dragging
local dragInput
local dragStart
local startPosition

MoverFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragInput = input
        dragStart = input.Position
        startPosition = MainFrame.Position
        input.Handled = true
    end
end)

MoverFrame.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPosition.X.Scale, startPosition.X.Offset + delta.X, startPosition.Y.Scale, startPosition.Y.Offset + delta.Y)
    end
end)

MoverFrame.InputEnded:Connect(function(input)
    if input == dragInput then
        dragging = false
        dragInput = nil
    end
end)

local TabsScrollingFrame = Instance.new("ScrollingFrame")
TabsScrollingFrame.Name = "Tabs"
TabsScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
TabsScrollingFrame.BorderSizePixel = 0
TabsScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 44, 173)
TabsScrollingFrame.Size = UDim2.new(0.47619, 0, 1, 0)
TabsScrollingFrame.Position = UDim2.new(-0.47619, 0, 0, 0)
TabsScrollingFrame.ScrollBarThickness = 0
TabsScrollingFrame.BackgroundTransparency = 0.5
Instance.new("UICorner", TabsScrollingFrame)
Instance.new("UIStroke", TabsScrollingFrame)
local TabsListLayout = Instance.new("UIListLayout")
TabsListLayout.Name = "UIListLayout"
TabsListLayout.Parent = TabsScrollingFrame
TabsListLayout.Wraps = true
TabsListLayout.Padding = UDim.new(0.003, 2)
TabsScrollingFrame.Parent = MainFrame

local HeaderFrame = Instance.new("Frame")
HeaderFrame.Name = "Header"
HeaderFrame.BorderSizePixel = 0
HeaderFrame.BackgroundColor3 = Color3.fromRGB(103, 52, 4)
HeaderFrame.Size = UDim2.new(0.59864, 0, 0.88095, 0)
HeaderFrame.Position = UDim2.new(1, 0, -0.32143, 0)
HeaderFrame.BackgroundTransparency = 0.5
Instance.new("UICorner", HeaderFrame)
Instance.new("UIStroke", HeaderFrame)
local HeaderTextLabel = Instance.new("TextLabel")
HeaderTextLabel.Name = "TextLabel"
HeaderTextLabel.BorderSizePixel = 0
HeaderTextLabel.TextSize = 12
HeaderTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HeaderTextLabel.BackgroundTransparency = 1
HeaderTextLabel.Size = UDim2.new(1, 0, 0.12162, 0)
HeaderTextLabel.Text = "Piroka Hub"
local HeaderTextLabelCorner = Instance.new("UICorner", HeaderTextLabel)
HeaderTextLabelCorner.CornerRadius = UDim.new(0, 2)
Instance.new("UIStroke", HeaderTextLabel)
HeaderTextLabel.Parent = HeaderFrame
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.TextStrokeTransparency = 0
MinimizeButton.BorderSizePixel = 2
MinimizeButton.TextSize = 60
MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.BackgroundTransparency = 1
MinimizeButton.Size = UDim2.new(0.18182, 0, 0.16216, 0)
MinimizeButton.Text = "-"
MinimizeButton.Position = UDim2.new(0.80682, 0, -0.05405, 0)
Instance.new("UIStroke", MinimizeButton)
MinimizeButton.Parent = HeaderFrame
HeaderFrame.Parent = MainFrame

-- Minimize button functionality
MinimizeButton.MouseButton1Click:Connect(function()
    MainFrame.Visible = not MainFrame.Visible
end)

Instance.new("UIAspectRatioConstraint", MainFrame).AspectRatio = 1.75

MainFrame.Parent = ScreenGui

local ElementsFolder = Instance.new("Folder")
ElementsFolder.Name = "Elements"
ElementsFolder.Parent = ScreenGui

-- Hide the initial elements
for _, child in ipairs(ElementsFolder:GetChildren()) do
    if child:IsA("Frame") or child:IsA("TextButton") then -- Adjust as needed
        child.Visible = false
    end
end

-- UI Element templates from your original script
local ButtonTemplate = MainFrame:FindFirstChild("Button_1e", true) or G2L["Button_1e"] -- Assuming G2L is accessible for templates
local ToggleTemplate = MainFrame:FindFirstChild("Toggle_22", true) or G2L["Toggle_22"]
local LabelTemplate = MainFrame:FindFirstChild("Label_28", true) or G2L["Label_28"]
local SliderTemplate = MainFrame:FindFirstChild("Slide_2a", true) or G2L["Slide_2a"]
local CategoriaTemplate = MainFrame:FindFirstChild("Categoria_37", true) or G2L["Categoria_37"]
local TextboxTemplate = MainFrame:FindFirstChild("Textbox_3d", true) or G2L["Textbox_3d"]
local DropdownTemplate -- We'll need to define this or create it on the fly, as it's more complex.
local ItemTemplate -- For Dropdown items

-- Function to clone elements and set up basic properties
local function cloneElement(template: Instance, parent: GuiObject): GuiObject
    local newElement = template:Clone()
    newElement.Visible = true
    newElement.Parent = parent
    return newElement
end

--- Creates a new Tab button.
-- @param text string The text to display on the tab.
-- @param targetFrame GuiObject The frame that this tab will show.
-- @return TextButton The created Tab button.
function PirokaHub.AddTab(text: string, targetFrame: GuiObject): TextButton
    local tabButton = Instance.new("TextButton")
    tabButton.Name = text
    tabButton.Size = UDim2.new(0.9, 0, 0.1, 0) -- Adjust size as needed
    tabButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    tabButton.BackgroundTransparency = 0.8
    tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    tabButton.Text = text
    tabButton.Font = Enum.Font.SourceSans
    tabButton.TextSize = 14
    tabButton.Parent = TabsScrollingFrame

    local corner = Instance.new("UICorner")
    corner.Parent = tabButton

    tabButton.MouseButton1Click:Connect(function()
        -- Hide all other content frames and show the target frame
        for _, item in ipairs(ItemsScrollingFrame:GetChildren()) do
            if item:IsA("GuiObject") and item ~= targetFrame then
                item.Visible = false
            end
        end
        targetFrame.Visible = true
    end)
    
    return tabButton
end

--- Creates a Link element.
-- @param linkText string The text to display for the link.
-- @param url string The URL to link to.
-- @param imageId number? The Roblox Asset ID for an image to display (optional).
-- @return Frame The created Link element.
function PirokaHub.AddLink(linkText: string, url: string, imageId: number?): Frame
    local linkFrame = cloneElement(ButtonTemplate, ItemsScrollingFrame) -- Re-using ButtonTemplate for its base frame
    linkFrame.Name = "Link"
    linkFrame.Size = UDim2.new(0.35534, 0, 0.08, 0) -- Adjust size for link layout

    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "LinkText"
    textLabel.Text = linkText
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.Size = UDim2.new(0.7, 0, 1, 0)
    textLabel.Position = UDim2.new(0.05, 0, 0, 0)
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.BackgroundTransparency = 1
    textLabel.Parent = linkFrame

    local copyButton = Instance.new("TextButton")
    copyButton.Name = "CopyButton"
    copyButton.Text = "Copy"
    copyButton.BackgroundColor3 = Color3.fromRGB(15, 255, 54) -- Green button
    copyButton.Size = UDim2.new(0.1, 0, 0.8, 0)
    copyButton.Position = UDim2.new(0.75, 0, 0.1, 0)
    copyButton.Parent = linkFrame
    Instance.new("UICorner", copyButton)

    local redirectButton = Instance.new("TextButton")
    redirectButton.Name = "RedirectButton"
    redirectButton.Text = "Go"
    redirectButton.BackgroundColor3 = Color3.fromRGB(170, 170, 170) -- Gray button
    redirectButton.Size = UDim2.new(0.1, 0, 0.8, 0)
    redirectButton.Position = UDim2.new(0.87, 0, 0.1, 0)
    redirectButton.Parent = linkFrame
    Instance.new("UICorner", redirectButton)

    copyButton.MouseButton1Click:Connect(function()
        -- This functionality requires special permissions (e.g., local plugins)
        -- For a normal game, you might want to print to output or chat.
        setclipboard(url)
        -- If you have a custom clipboard system, implement it here.
    end)

    redirectButton.MouseButton1Click:Connect(function()
        -- Open the link in an external browser
        game:GetService("ProximityPromptService"):PromptForSafety("Would you like to visit this link?", url, Enum.PromptGameMode.StayInGame)
    end)

    if imageId then
        local imageLabel = Instance.new("ImageLabel")
        imageLabel.Name = "LinkImage"
        imageLabel.Image = "rbxassetid://" .. tostring(imageId)
        imageLabel.BackgroundTransparency = 1
        imageLabel.Size = UDim2.new(0.1, 0, 1, 0) -- Adjust size as needed
        imageLabel.Position = UDim2.new(0, 0, 0, 0)
        imageLabel.Parent = linkFrame
        textLabel.Position = UDim2.new(0.12, 0, 0, 0) -- Adjust text position if image exists
    end

    return linkFrame
end

--- Creates a simple Label element.
-- @param text string The text for the label.
-- @return Frame The created Label element.
function PirokaHub.AddLabel(text: string): Frame
    local labelFrame = cloneElement(LabelTemplate, ItemsScrollingFrame)
    local textLabel = labelFrame:FindFirstChild("TextLabel")
    if textLabel and textLabel:IsA("TextLabel") then
        textLabel.Text = text
    end
    return labelFrame
end

--- Creates a Category element.
-- @param text string The text for the category.
-- @return Frame The created Category element.
function PirokaHub.AddCategory(text: string): Frame
    local categoryFrame = cloneElement(CategoriaTemplate, ItemsScrollingFrame)
    local textLabel = categoryFrame:FindFirstChild("TextLabel")
    if textLabel and textLabel:IsA("TextLabel") then
        textLabel.Text = text
    end
    return categoryFrame
end

--- Creates a Line element (for visual separation).
-- @return Frame The created Line element.
function PirokaHub.AddLine(): Frame
    local lineFrame = Instance.new("Frame")
    lineFrame.Name = "Linha"
    lineFrame.Size = UDim2.new(0.9, 0, 0.005, 0) -- Thin line
    lineFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    lineFrame.BackgroundTransparency = 0.5
    Instance.new("UICorner", lineFrame)
    lineFrame.Parent = ItemsScrollingFrame
    return lineFrame
end

--- Creates a Slider element.
-- @param labelText string The label text for the slider.
-- @param initialValue number The initial value of the slider.
-- @param minValue number The minimum value of the slider.
-- @param maxValue number The maximum value of the slider.
-- @param callback function A function to call when the slider value changes. (newValue: number)
-- @return Frame The created Slider element.
function PirokaHub.AddSlider(labelText: string, initialValue: number, minValue: number, maxValue: number, callback: (number) -> ()): Frame
    local sliderFrame = cloneElement(SliderTemplate, ItemsScrollingFrame)
    sliderFrame.Name = "Slider"

    local sliderLabel = sliderFrame:FindFirstChild("TextLabel")
    if sliderLabel and sliderLabel:IsA("TextLabel") then
        sliderLabel.Text = labelText
    end

    local valueTextBox = sliderFrame:FindFirstChild("Valor")
    if valueTextBox and valueTextBox:IsA("TextBox") then
        valueTextBox.Text = tostring(initialValue)
    end

    local bola = sliderFrame:FindFirstChild("Bola")
    local linha = sliderFrame:FindFirstChild("Linha")
    local linha2 = sliderFrame:FindFirstChild("Linha2")

    if not bola or not linha or not linha2 then
        warn("Slider template is missing components: Bola, Linha, or Linha2")
        return sliderFrame
    end

    local sliderWidth = linha.AbsoluteSize.X
    local currentSliderValue = initialValue

    local function updateSliderVisuals(value: number)
        local percentage = (value - minValue) / (maxValue - minValue)
        local bolaXPosition = UDim2.new(linha.Position.X.Scale, linha.Position.X.Offset + (percentage * linha.Size.X.Offset), bola.Position.Y.Scale, bola.Position.Y.Offset)
        bola.Position = UDim2.new(linha.Position.X.Scale + (linha.Size.X.Scale * percentage), 0, bola.Position.Y.Scale, 0)
        linha2.Size = UDim2.new(percentage, linha.Size.X.Offset * percentage, linha2.Size.Y.Scale, 0)
        valueTextBox.Text = tostring(math.floor(value + 0.5)) -- Round to nearest integer for display
    end

    local draggingSlider = false
    local function onInputChanged(input)
        if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            local mouseX = input.Position.X - linha.AbsolutePosition.X
            local newX = math.clamp(mouseX, 0, linha.AbsoluteSize.X)
            local normalizedValue = newX / linha.AbsoluteSize.X
            currentSliderValue = minValue + (normalizedValue * (maxValue - minValue))
            updateSliderVisuals(currentSliderValue)
            callback(currentSliderValue)
        end
    end

    bola.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSlider = true
            input.Handled = true
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(onInputChanged)

    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSlider = false
        end
    end)

    valueTextBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local newValue = tonumber(valueTextBox.Text)
            if newValue ~= nil then
                local clampedValue = math.clamp(newValue, minValue, maxValue)
                currentSliderValue = clampedValue
                updateSliderVisuals(currentSliderValue)
                callback(currentSliderValue)
            else
                valueTextBox.Text = tostring(math.floor(currentSliderValue + 0.5))
            end
        end
    end)

    updateSliderVisuals(initialValue) -- Set initial visual state

    return sliderFrame
end

--- Creates a Textbox element.
-- @param labelText string The label text for the textbox.
-- @param initialText string The initial text inside the textbox.
-- @param callback function A function to call when the textbox value changes. (newText: string)
-- @return Frame The created Textbox element.
function PirokaHub.AddTextbox(labelText: string, initialText: string, callback: (string) -> ()): Frame
    local textboxFrame = cloneElement(TextboxTemplate, ItemsScrollingFrame)
    textboxFrame.Name = "Textbox"

    local valueTextBox = textboxFrame:FindFirstChild("Valor")
    if valueTextBox and valueTextBox:IsA("TextBox") then
        valueTextBox.Text = initialText
        valueTextBox.PlaceholderText = labelText -- Using placeholder for the label, or adding a separate label
        valueTextBox.TextScaled = true -- Make text fit

        valueTextBox.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                callback(valueTextBox.Text)
            end
        end)
    else
        warn("Textbox template is missing the 'Valor' TextBox.")
    end

    return textboxFrame
end

--- Creates a Button element.
-- @param text string The text to display on the button.
-- @param callback function A function to call when the button is clicked.
-- @return Frame The created Button element.
function PirokaHub.AddButton(text: string, callback: () -> ()): Frame
    local buttonFrame = cloneElement(ButtonTemplate, ItemsScrollingFrame)
    buttonFrame.Name = "Button"

    local textButton = buttonFrame:FindFirstChild("TextButton")
    if textButton and textButton:IsA("TextButton") then
        textButton.Text = text
        textButton.MouseButton1Click:Connect(callback)
    else
        warn("Button template is missing the 'TextButton' component.")
    end

    return buttonFrame
end

--- Creates a Toggle element.
-- @param text string The text to display on the toggle.
-- @param initialState boolean The initial state of the toggle (true for ON, false for OFF).
-- @param callback function A function to call when the toggle state changes. (newState: boolean)
-- @return Frame The created Toggle element.
function PirokaHub.AddToggle(text: string, initialState: boolean, callback: (boolean) -> ()): Frame
    local toggleFrame = cloneElement(ToggleTemplate, ItemsScrollingFrame)
    toggleFrame.Name = "Toggle"

    local textButton = toggleFrame:FindFirstChild("TextButton")
    local indicatorFrame = toggleFrame:FindFirstChild("Frame") -- This is the visual indicator

    if not textButton or not indicatorFrame or not textButton:IsA("TextButton") or not indicatorFrame:IsA("Frame") then
        warn("Toggle template is missing 'TextButton' or 'Frame' components.")
        return toggleFrame
    end

    textButton.Text = text
    local currentState = initialState

    local function updateToggleVisuals()
        if currentState then
            indicatorFrame.BackgroundColor3 = Color3.fromRGB(54, 255, 15) -- Green for ON
            indicatorFrame.Position = UDim2.new(0.875, 0, 0.15662, 0) -- Position for ON
        else
            indicatorFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red for OFF
            indicatorFrame.Position = UDim2.new(0.03, 0, 0.15662, 0) -- Position for OFF
        end
    end

    textButton.MouseButton1Click:Connect(function()
        currentState = not currentState
        updateToggleVisuals()
        callback(currentState)
    end)

    updateToggleVisuals() -- Set initial visual state

    return toggleFrame
end

--- Creates a Dropdown element.
-- @param labelText string The text to display on the dropdown.
-- @param options table<string> A list of string options for the dropdown.
-- @param multiSelect boolean If true, allows multiple selections.
-- @param callback function A function to call when the selection changes. (selectedItems: table<string>)
-- @return Frame The created Dropdown element.
function PirokaHub.AddDropdown(labelText: string, options: {string}, multiSelect: boolean, callback: ({string}) -> ()): Frame
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = "Dropdown"
    dropdownFrame.Size = UDim2.new(0.35534, 0, 0.08, 0)
    dropdownFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    dropdownFrame.BackgroundTransparency = 0.8
    Instance.new("UICorner", dropdownFrame)
    Instance.new("UIStroke", dropdownFrame)
    dropdownFrame.Parent = ItemsScrollingFrame

    local mainButton = Instance.new("TextButton")
    mainButton.Name = "DropdownButton"
    mainButton.Text = labelText
    mainButton.Size = UDim2.new(1, 0, 1, 0)
    mainButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    mainButton.BackgroundTransparency = 1
    mainButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    mainButton.Font = Enum.Font.SourceSans
    mainButton.TextSize = 14
    mainButton.Parent = dropdownFrame

    local arrow = Instance.new("ImageLabel")
    arrow.Name = "Arrow"
    arrow.Image = "rbxassetid://6030999596" -- Arrow down icon (replace with a suitable asset ID)
    arrow.BackgroundTransparency = 1
    arrow.Size = UDim2.new(0.1, 0, 0.8, 0)
    arrow.Position = UDim2.new(0.85, 0, 0.1, 0)
    arrow.Parent = mainButton

    local optionsFrame = Instance.new("ScrollingFrame")
    optionsFrame.Name = "Options"
    optionsFrame.Size = UDim2.new(1, 0, 0, 0) -- Height will be dynamic
    optionsFrame.Position = UDim2.new(0, 0, 1, 0)
    optionsFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    optionsFrame.BackgroundTransparency = 0.9
    optionsFrame.Visible = false
    optionsFrame.ZIndex = 2 -- Ensure it appears above other elements
    optionsFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Dynamic canvas size
    optionsFrame.Parent = dropdownFrame
    Instance.new("UICorner", optionsFrame)
    Instance.new("UIStroke", optionsFrame)

    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.Name = "OptionsLayout"
    optionsLayout.Parent = optionsFrame
    optionsLayout.FillDirection = Enum.FillDirection.Vertical
    optionsLayout.Padding = UDim.new(0.01, 0)

    local searchTextBox = Instance.new("TextBox")
    searchTextBox.Name = "Search"
    searchTextBox.PlaceholderText = "Search..."
    searchTextBox.Size = UDim2.new(1, 0, 0.15, 0)
    searchTextBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    searchTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    searchTextBox.Parent = optionsFrame
    Instance.new("UICorner", searchTextBox)
    
    local selectedItems: {string} = {}
    local itemButtons: {TextButton} = {}

    local function updateDropdownText()
        if #selectedItems == 0 then
            mainButton.Text = labelText
        elseif #selectedItems == 1 then
            mainButton.Text = selectedItems[1]
        else
            mainButton.Text = "(" .. #selectedItems .. ") items selected"
        end
    end

    local function createOptionButton(optionText: string)
        local itemButton = Instance.new("TextButton")
        itemButton.Name = "Item"
        itemButton.Text = optionText
        itemButton.Size = UDim2.new(1, 0, 0.15, 0) -- Height will be small for each item
        itemButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        itemButton.BackgroundTransparency = 1
        itemButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        itemButton.Font = Enum.Font.SourceSans
        itemButton.TextSize = 12
        itemButton.Parent = optionsFrame
        table.insert(itemButtons, itemButton)

        itemButton.MouseButton1Click:Connect(function()
            if multiSelect then
                local index = table.find(selectedItems, optionText)
                if index then
                    table.remove(selectedItems, index)
                    itemButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- Deselect color
                else
                    table.insert(selectedItems, optionText)
                    itemButton.TextColor3 = Color3.fromRGB(54, 255, 15) -- Select color (green)
                end
            else
                selectedItems = {optionText}
                for _, btn in ipairs(itemButtons) do
                    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
                itemButton.TextColor3 = Color3.fromRGB(54, 255, 15)
                optionsFrame.Visible = false -- Hide dropdown after single selection
            end
            updateDropdownText()
            callback(selectedItems)
        end)
    end

    for _, option in ipairs(options) do
        createOptionButton(option)
    end

    searchTextBox.Changed:Connect(function(property)
        if property == "Text" then
            local searchText = searchTextBox.Text:lower()
            for _, itemButton in ipairs(itemButtons) do
                itemButton.Visible = string.find(itemButton.Text:lower(), searchText) ~= nil
            end
            optionsLayout:LayoutForcingChanged() -- Force layout update
            optionsFrame.CanvasSize = UDim2.new(0, 0, 0, optionsLayout.AbsoluteContentSize.Y + searchTextBox.AbsoluteSize.Y)
        end
    end)
    
    mainButton.MouseButton1Click:Connect(function()
        optionsFrame.Visible = not optionsFrame.Visible
        if optionsFrame.Visible then
            -- Calculate and set dynamic height for optionsFrame
            local totalHeight = 0
            for _, itemButton in ipairs(itemButtons) do
                if itemButton.Visible then
                    totalHeight = totalHeight + itemButton.AbsoluteSize.Y + optionsLayout.Padding.Offset
                end
            end
            totalHeight = totalHeight + searchTextBox.AbsoluteSize.Y -- Add search bar height
            optionsFrame.Size = UDim2.new(1, 0, 0, math.min(totalHeight, ItemsScrollingFrame.AbsoluteSize.Y * 0.8)) -- Cap max height to 80% of parent scrolling frame
            optionsFrame.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
        end
    end)

    return dropdownFrame
end


-- Initialize the GUI when the library is required
function uiLibrary.Init()
    ScreenGui.Parent = PlayerGui
    -- Position main frame initially
    MainFrame.Position = UDim2.new(0.5, -MainFrame.AbsoluteSize.X / 2, 0.5, -MainFrame.AbsoluteSize.Y / 2)
end

-- Function to create a new content page/frame for items
function PirokaHub.AddPage(name: string): Frame
    local pageFrame = Instance.new("Frame")
    pageFrame.Name = name
    pageFrame.Size = UDim2.new(1, 0, 1, 0)
    pageFrame.Position = UDim2.new(0, 0, 0, 0)
    pageFrame.BackgroundTransparency = 1
    pageFrame.Visible = false -- Hidden by default, shown by tabs
    pageFrame.Parent = ItemsScrollingFrame

    local pageLayout = Instance.new("UIListLayout")
    pageLayout.Name = "PageLayout"
    pageLayout.Parent = pageFrame
    pageLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    pageLayout.Padding = UDim.new(0.01, 5)
    pageLayout.FillDirection = Enum.FillDirection.Vertical
    pageLayout.SortOrder = Enum.SortOrder.LayoutOrder

    return pageFrame
end

return PirokaHub
